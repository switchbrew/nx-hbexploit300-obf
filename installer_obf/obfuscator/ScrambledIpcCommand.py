import Variable
import ScrambledConstant

TEST=0

SFCI_MAGIC=0x49434653

try:
    long        # Python 2
except NameError:
    long = int  # Python 3


class IpcCommand:
    def __init__(self, service_handle_varname, cmd_id, cmd_type=4, x=None, a=None, b=None, raw=None, handles=None, pid=False, ignore_error=False):
        x = x or []
        a = a or []
        b = b or []
        raw = raw or []
        handles = handles or []
        
        self.service_handle_varname = service_handle_varname

        self.cmd_id   = ScrambledConstant.ScrambledConstant(cmd_id)
        self.cmd_hdr0 = ScrambledConstant.ScrambledConstant(cmd_type | (len(x)<<16) | (len(a)<<20) | (len(b)<<24))

        if (len(handles) > 0) or pid:
            has_handle = 0x80000000
        else:
            has_handle = 0
        self.cmd_hdr1 = ScrambledConstant.ScrambledConstant((len(raw) + 4 + 4) | has_handle)

        cmd_hdr2 = 0
        if pid:
            cmd_hdr2 |= 1
            cmd_hdr2 |= (len(handles) << 1)
        self.cmd_hdr2 = ScrambledConstant.ScrambledConstant(cmd_hdr2)

        self.handles = handles
        self.pid = pid
        self.x = x
        self.a = a
        self.b = b
        self.ignore_error = ignore_error

        if len(self.b) > 0:
            raise NotImplementedError()

        raw = [SFCI_MAGIC, 0, cmd_id, 0] + raw
        self.raw = []

        for r in raw:
            if type(r) is int or type(r) is long:
                self.raw.append(ScrambledConstant.ScrambledConstant(r))
            else:
                self.raw.append(r)

    def generate(self):
        ret = ''
        ret += self.cmd_hdr0.generate_scramble()
        ret += self.cmd_hdr1.generate_scramble()
        ret += self.cmd_hdr2.generate_scramble()

        for r in self.raw:
            if isinstance(r, ScrambledConstant.ScrambledConstant):
                ret += r.generate_scramble()

        variables = {
            'tls_ptr':        Variable.alloc_name('tls_ptr'),
            'cmd_hdr0':       self.cmd_hdr0.get_var_name(),
            'cmd_hdr1':       self.cmd_hdr1.get_var_name(),
            'cmd_hdr2':       self.cmd_hdr2.get_var_name(),
            'service_handle': self.service_handle_varname
        }

        ### Emit ipc headers
        ret += \
'''
u32* {tls_ptr} = (u32*)armGetTls();
{tls_ptr}[0] = {cmd_hdr0};
{tls_ptr}[1] = {cmd_hdr1};
{tls_ptr}[2] = {cmd_hdr2};

'''.format(**variables)

        handle_offset = 2
        if self.pid or len(self.handles):
            handle_offset += 1
            if self.pid:
                handle_offset += 2

        ### Emit handles
        for h in self.handles:
            ret += '''{tls_ptr}[%d] = %s;''' % (handle_offset, h)
            handle_offset += 1

        ### Emit X descriptors
        for xx in self.x:
            ret += '''{tls_ptr}[%d] = (((((u64)%s) >> 32) & 0xF) << 12) | (((((u64)%s) >> 36) & 0xF) << 6);'''.format(**variables) % (handle_offset, xx[0], xx[0])

            size = ScrambledConstant.ScrambledConstant(xx[1])
            ret += size.generate_scramble()
            ret += '''*(((u16*)(&{tls_ptr}[%d]))+1) = %s;\n'''.format(**variables) % (handle_offset, size.get_var_name())

            ret += '''{tls_ptr}[%d+1] = ((u64)%s) & 0xFFFFFFFF;\n'''.format(**variables) % (handle_offset, xx[0])
            handle_offset += 2

        ### Emit A descriptors
        for aa in self.a:
            size = ScrambledConstant.ScrambledConstant(aa[1])
            ret += size.generate_scramble()
            ret += '''{tls_ptr}[%d] = %s;\n'''.format(**variables) % (handle_offset, size.get_var_name())
            ret += '''{tls_ptr}[%d+1] = ((u64)%s) & 0xFFFFFFFF;\n'''.format(**variables) % (handle_offset, aa[0])
            ret += '''{tls_ptr}[%d+2] = (((((u64)%s) >> 32) & 0xF) << 28) | (((((u64)%s) >> 36) & 0xF) << 2);\n'''.format(**variables) % (handle_offset, aa[0], aa[0])

            if len(aa) > 2:
                flags = aa[2]
            else:
                flags = 0
            ret += '''{tls_ptr}[%d+2] |= %d;\n'''.format(**variables) % (handle_offset, flags)

            handle_offset += 3

        ### Emit raws
        offset = ((handle_offset + 3) / 4) * 4
        for r in self.raw:
            if isinstance(r, ScrambledConstant.ScrambledConstant):
                ret += ('{tls_ptr}[%d] = %s;\n'.format(**variables)) % (offset, r.get_var_name())
            else:
                ret += ('{tls_ptr}[%d] = %s;\n'.format(**variables)) % (offset, r)
            offset += 1

        ret += 'rc = svcSendSyncRequest({service_handle});\n'.format(**variables)

        if TEST and not self.ignore_error:
            ret += 'if (rc) fatalSimple(MAKERESULT(222, %d));\n' % Variable.alloc_err()

        return ret

    def __repr__(self):
        return self.generate()
